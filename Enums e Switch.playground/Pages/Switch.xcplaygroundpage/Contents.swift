/*:
## Switch

 Voc√™ j√° viu que as instru√ß√µes if n√£o s√£o ideais para verificar os valores de enums.
 
 Elas geram muita polui√ß√£o visual e n√£o podem saber se voc√™ lidou com todos os casos, embora a ideia das enums seja fornecer uma lista limitada de casos.
 
 Qual √© uma maneira melhor de escolher outras a√ß√µes com base no valor de uma enum?
 */
enum LunchChoice {
    case pasta
    case burger
    case soup
}

let choice = LunchChoice.burger
//:  A resposta √© uma instru√ß√£o _switch_:
switch choice {
    case .pasta:
        "üçù"
    case .burger:
        "üçî"
    case .soup:
        "üç≤"
}
/*:
 A instru√ß√£o switch √© muito parecida √† declara√ß√£o de enum acima. Isso acontece porque elas foram feitas para funcionar bem juntas.
 
 A instru√ß√£o switch come√ßa com a palavra-chave `switch`, seguida pelo valor que verificar√° e uma chave aberta:\
 `switch choice {`\
 Em seguida, adicione uma s√©rie de casos a serem verificados, cada um com a palavra-chave `case`, seguido por um valor e dois pontos:\
 `case .pasta:`\
 Como o tipo da enum √© conhecido, voc√™ pode usar a sintaxe de ponto e deixar de fora o nome do tipo.\
 Se o valor verificado corresponder a uma instru√ß√£o de caso, o c√≥digo entre esse caso e o pr√≥ximo √© executado. Depois, a instru√ß√£o switch, assim como a instru√ß√£o if, √© conclu√≠da.
 
 A seguir, conhe√ßa outros recursos das instru√ß√µes switch.

[Anterior](@previous)  |  p√°gina 9 de 21  |  [Na sequ√™ncia: Esgotando as possibilidades](@next)
 */